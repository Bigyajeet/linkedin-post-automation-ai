"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsNumber = assertIsNumber;
exports.assertIsString = assertIsString;
exports.assertIsArray = assertIsArray;
exports.assertIsNodeParameters = assertIsNodeParameters;
const n8n_workflow_1 = require("n8n-workflow");
function assertIsType(parameterName, value, type) {
    (0, n8n_workflow_1.assert)(typeof value === type, `Parameter "${parameterName}" is not ${type}`);
}
function assertIsNumber(parameterName, value) {
    assertIsType(parameterName, value, 'number');
}
function assertIsString(parameterName, value) {
    assertIsType(parameterName, value, 'string');
}
function assertIsArray(parameterName, value, validator) {
    (0, n8n_workflow_1.assert)(Array.isArray(value), `Parameter "${parameterName}" is not an array`);
    (0, n8n_workflow_1.assert)(value.every(validator), `Parameter "${parameterName}" has elements that don't match expected types`);
}
function assertIsNodeParameters(value, parameters) {
    (0, n8n_workflow_1.assert)(typeof value === 'object' && value !== null, 'Value is not a valid object');
    const obj = value;
    Object.keys(parameters).forEach((key) => {
        const param = parameters[key];
        const paramValue = obj[key];
        if (!param.optional && paramValue === undefined) {
            (0, n8n_workflow_1.assert)(false, `Required parameter "${key}" is missing`);
        }
        if (paramValue !== undefined) {
            if (param.type === 'resource-locator') {
                (0, n8n_workflow_1.assert)(typeof paramValue === 'object' &&
                    paramValue !== null &&
                    '__rl' in paramValue &&
                    'mode' in paramValue &&
                    'value' in paramValue, `Parameter "${key}" is not a valid resource locator object`);
            }
            else if (param.type === 'object') {
                (0, n8n_workflow_1.assert)(typeof paramValue === 'object' && paramValue !== null, `Parameter "${key}" is not a valid object`);
            }
            else if (param.type.endsWith('[]')) {
                const baseType = param.type.slice(0, -2);
                const elementType = baseType === 'string' || baseType === 'number' || baseType === 'boolean'
                    ? baseType
                    : 'string';
                (0, n8n_workflow_1.assert)(Array.isArray(paramValue), `Parameter "${key}" is not an array`);
                paramValue.forEach((item, index) => {
                    (0, n8n_workflow_1.assert)(typeof item === elementType, `Parameter "${key}[${index}]" is not a valid ${elementType}`);
                });
            }
            else {
                (0, n8n_workflow_1.assert)(typeof paramValue === param.type, `Parameter "${key}" is not a valid ${param.type}`);
            }
        }
    });
}
//# sourceMappingURL=types.js.map